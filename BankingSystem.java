/* REFERENCES/GUIDES
HashMap: https://youtu.be/0dR-YAFFg6I?si=BEWk0tki6rbUW3rC & https://www.w3schools.com/java/java_hashmap.asp -> Implemented
NumberExceptionError: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/NumberFormatException.html -> Implemented
Java Exception/Error handling using try-catch: https://www.w3schools.com/java/java_try_catch.asp -> Not fully implemented
Clear Terminal Screen: https://rootstack.com/en/blog/java-clear-screen -> Implemented
Thread.sleep() to sleep the system: https://www.geeksforgeeks.org/thread-sleep-method-in-java-with-examples/ -> Implemented
CTRL+C Interruption handling: https://docs.oracle.com/javase/6/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread) -> Cancelled
ChatGPT...The man. The myth. The legend. -> Used for debugging
VS Code auto-fix and completion -> Utilized
Stackoverflow -> Used for debugging
*/

/* TESTED ON
Linux (Debian 12)
*/

/* SEQUENCE OF METHODS. EACH ARE SEPARATED BY A COMMENT.
clearConsole()
sleepConsole()
userRegister()
userLogin()
postLogin()
mainMenu()
Main Method(Entrance)
*/

/* TODOS
Test on Windows 10 and Windows 11. -- WIP
Remove redundant comments. -- Done
Fix comments. -- Done
Use easy to understand comments for explaining. -- Done
Update code. -- Done
Sanitize user input. -- Done
Improve input validation -- WIP
*/

/* CHANGES & MODIFICATIONS 
1. userRegister() -- Checks first if the username is available or not.
2. userLogin() -- If the username doesn't exists, it will notify the user about it and proceed back to main menu because what's the purpose of providing a pin
                  for a username that doesn't exists?
*/

/* Q&A
Why clear terminal? -- To prevent messy terminal and to prevent users from getting distracted/confused.
Why sleep terminal? -- It allows users to slow down and carefully provide input.
*/

/* RECENT CHANGES
Fixed invalid user input proceeds to ask for their pin.
Improved security. 
*/

import java.io.IOException; // Auto-generated by VSCode for catch block.
import java.lang.Runtime; // For executing specific system commands.
import java.lang.Thread; // Sleep.
import java.util.Scanner; // For user inputs.
import java.util.HashMap; // Instead of using multiple arrays or variables, I am going to utilize HashMap which is kinda similiar to Python's dictionary (key -> value)(username -> pin)

public class BankingSystem {

//---------------------------------------------------------------------------------------------------------------------------------------------------------
    // Clears the terminal screen based on the OS. (Windows or Mac/Linux).
    static void clearConsole() {
        String os = System.getProperty("os.name");

        // For Windows systems.
        if (os.contains("Windows")) {
            try {
                Runtime.getRuntime().exec("cls");
            } catch (IOException e) {
                e.printStackTrace();
            }
        // For Mac/Linux systems.
        } else {
            System.out.print("\033[H\033[2J");
            System.out.flush();
        }
    }

    // Pauses the program for 3 seconds, used after messages to give users time to read.
    static void sleepConsole() {
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

//---------------------------------------------------------------------------------------------------------------------------------------------------------
    /* Stores user information with the username as the key, and an Object array as the value, which contains:
    username (String)
    pin (Integer)
    account type (String: either "Savings" or "Current")
    balance (Integer)
    */
    static HashMap<String, Object[]> userDatabase = new HashMap<>();

//---------------------------------------------------------------------------------------------------------------------------------------------------------
    /* USER REGISTRATION
    Collect user information: username, pin, account type, and initial deposit.
    Validation checks for pin and initial deposit.
    */
    static void userRegister() {
        Scanner input = new Scanner(System.in);

        clearConsole(); // Clear terminal for a cleaner look.
        
        System.out.println("********************** REGISTRATION ********************\n");

        // Ask the user for a username
        System.out.print("[+] Enter a username: ");
        String userName = input.nextLine().trim();

        if (userDatabase.containsKey(userName)) {
            System.out.println("Username already exists. Try a different one.\n");

            sleepConsole(); // Sleep terminal for 3 seconds.
            userRegister(); // Register again.
        }

        /* Ask the user for a 4-digit pin code. While Loop and If Statement are used to validate the pin code.
         * While loop is used to repeat the process of asking the user for a 4-digit pin code. 
         * If Statement is used to check if the given pin code (temporary String) length is equal to 4 (4 digits).
         * Initialize a pin variable without a value.
        */
        int pin;
        while (true) {
            System.out.print("[+] Enter a 4-digit pin code: ");
            String pinString = input.nextLine().trim();

            if (pinString.length() == 4) {
                try {
                    pin = Integer.parseInt(pinString);
                    break; // Exit this loop if a valid pin is entered.
                } catch (NumberFormatException e) { // Indicates that the application has attempted to convert a string to one of the numeric types, but the string does not have the appropriate format.
                    System.out.println("Please enter only digits!\n");
                }
            } else {
                System.out.println("Please enter exactly a 4-digit pin code!\n");
            }
        }
        
        //Updated code. Checks for proper user input before proceeding.
        String accType = null;
        while (true) {
            System.out.println("\nChoose account type:");
            System.out.println("1. Savings\n2. Current");
            System.out.print("[+] Enter your choice: ");
            
            try {
                int accChoice = input.nextInt();
                if (accChoice == 1) {
                    accType = "Savings";
                    break;
                } else if (accChoice == 2) {
                    accType = "Current";
                    break;
                } else {
                    System.out.println("\nInvalid choice. Please enter 1 for Savings or 2 for Current.");
                    sleepConsole();
                }
            } catch (java.util.InputMismatchException e) {
                System.out.println("\nInvalid input. Please enter a number (1 or 2).");
                sleepConsole();
                input.nextLine(); // Clear invalid input from scanner.
            }
        }

        /* Updated code. Checks for any improper user inputs. 
         * If caught, ask again for initial deposit.
        */
        int initDeposit = 0;
        while (true) {
            System.out.print("\n[+] Enter your initial deposit: ");

            try {
                initDeposit = input.nextInt();

                if (accType.equals("Savings") && initDeposit < 1000) {
                    System.out.println("\nInvalid deposit. Minimum balance for a Savings account is 1000.");
                    sleepConsole(); // Sleep terminal for 3 seconds.
                } else if (accType.equals("Current") && initDeposit < 5000) {
                    System.out.println("\nInvalid deposit. Minimum balance for a Current account is 5000.");
                    sleepConsole(); // Sleep terminal for 3 seconds.
                } else {
                    userDatabase.put(userName, new Object[]{userName, pin, accType, initDeposit});
                    System.out.println("\nRegistration successful!");
                    sleepConsole(); // Sleep terminal for 3 seconds.
                    mainMenu(); // Back to main menu.
                    return; // Exit method.
                }
            } catch (java.util.InputMismatchException e) {
                System.out.println("\nInvalid input. Please enter digits only.");
                sleepConsole(); // Sleep terminal for 3 seconds.
                input.nextLine(); // Clear invalid input from scanner.
            }
        }
    }
        
//---------------------------------------------------------------------------------------------------------------------------------------------------------
    /* USER LOGIN
    Get the username and validate PIN.
    If successful, proceed to post-login menu.
    If not, lock the account after 3 failed attemps.
    */
    static void userLogin() {
        Scanner input = new Scanner(System.in);
        int loginAttempts = 3; // Login attempts.

        clearConsole(); // Clear terminal for a cleaner look.
        
        System.out.println("*********************** LOGIN **************************");

        System.out.print("\n[+] Enter your username: ");
        String userName = input.nextLine().trim();

        if (!userDatabase.containsKey(userName)) {
            System.out.print("Username does not exist.");
            sleepConsole(); // Sleep terminal for 3 seconds.
            //userLogin(); // Back to user login.
        }

        while (loginAttempts > 0) {
            System.out.print("[+] Enter your PIN: ");
            int pin;

            try {
                pin = input.nextInt();

                Object[] userInfo = userDatabase.get(userName); // Retrieve user data from HashMap and check PIN.
                int storedPin = (int) userInfo[1]; // Retrieve PIN as integer.

                if (storedPin == pin) {
                    System.out.println("Login successful!");
                    clearConsole(); // Clear terminal for a cleaner look.
                    postLogin(userName, (String) userInfo[2], (int) userInfo[3]); // Proceed to post login menu.
                    return;
                } else {
                    loginAttempts--;
                    System.out.println("Incorrect PIN.\n");
                }
            } catch (java.util.InputMismatchException e) {
                System.out.println("Invalid input. Please enter digits only.");
                input.nextLine(); // Clear invalid input from scanner.
            }
        }
        System.out.println("Account locked due to multiple failed login attempts.");
        sleepConsole(); // Sleep terminal for 3 seconds.
        mainMenu(); // Back to main menu.
    }

//---------------------------------------------------------------------------------------------------------------------------------------------------------
    /* POST LOGIN MENU
    Presents options to the logged-in user: check balance, deposit, withdraw, calculate interest, or logout.
    Depending on the user's choice, it calls the appropriate method.
    */
    static void postLogin(String userName, String accType, int userBalance) {
        Scanner input = new Scanner(System.in);
    
    // Fixed issue where it asks the user for a pin if entered a char or String.
        while (true) {
            clearConsole(); // Clear terminal for a cleaner look.
            System.out.println("****************** POST LOGIN MENU *********************");
    
            System.out.println("\nWelcome, " + userName);
            System.out.println("1. Check Balance");
            System.out.println("2. Deposit Money");
            System.out.println("3. Withdraw Money");
            System.out.println("4. Calculate Interest (Savings Only)");
            System.out.println("5. Logout");
            System.out.print("[+] Enter your choice: ");
    
            if (!input.hasNextInt()) { // Check if the input is not an integer.
                System.out.println("\nInvalid input. Please enter digits only.");
                input.nextLine(); // Clear the invalid input.
                sleepConsole(); // Sleep terminal for 3 seconds.
                continue; // Restart the loop.
            }
    
            int userChoice = input.nextInt(); // Get the numeric input.
    
            switch (userChoice) {
                case 1:
                    System.out.println("\nYour current balance is " + userBalance + ".");
                    break;
                case 2:
                    depositMoney(userName, accType, userBalance);
                    break;
                case 3:
                    withdrawMoney(userName, accType, userBalance);
                    break;
                case 4:
                    if (accType.equals("Savings")) {
                        calculateInterest(userName, accType, userBalance);
                    } else {
                        System.out.println("\nThis feature is not available for Current accounts.");
                    }
                    break;
                case 5:
                    System.out.println("\nLogging out...");
                    sleepConsole();
                    mainMenu();
                    return; // Exit the method.
                default:
                    System.out.println("\nInvalid choice. Please select a valid option.");
            }
            sleepConsole(); // Pause before returning to the menu.
        }
    }

    /* DEPOSIT MONEY
    User enters deposit amount.
    The amount is added to their balance if it's positive.
    */

    // Fixed issue where it asks the user for a pin if entered a char or String.
    static void depositMoney(String userName, String accType, int userBalance) {
        Scanner input = new Scanner(System.in);
    
        while (true) {
            System.out.print("\n[+] Enter the amount to deposit: ");
            
            if (!input.hasNextInt()) { // Check if the input is not an integer.
                System.out.println("\nInvalid input. Please enter digits only.");
                sleepConsole(); // Sleep terminal for 3 seconds.
                input.nextLine(); // Clear the invalid input.
                continue; // Restart the loop.
            }
    
            int depositAmount = input.nextInt(); // Get the deposit amount.
    
            if (depositAmount <= 0) {
                System.out.println("\nDeposit amount must be positive.");
                sleepConsole(); // Sleep terminal for 3 seconds.
            } else {
                userBalance += depositAmount; // Add the deposit to the balance.
                System.out.println("\nDeposit successful! New balance: " + userBalance);
                sleepConsole(); // Sleep terminal for 3 seconds.
                postLogin(userName, accType, userBalance); // Return to postLogin menu.
                return; // Exit the method.
            }
        }
    }
    
    /* WITHDRAW MONEY
    User enters withdrawal amount.
    Depending on the account type, it checks for withdrawal limits.
    */

    // Fixed issue where it asks the user for a pin if entered a char or String.
    static void withdrawMoney(String userName, String accType, int userBalance) {
        Scanner input = new Scanner(System.in);
    
        while (true) {
            System.out.print("\n[+] Enter the amount to withdraw: ");
            
            if (!input.hasNextInt()) { // Check if the input is not an integer.
                System.out.println("\nInvalid input. Please enter digits only.");
                sleepConsole(); // Sleep terminal for 3 seconds.
                input.nextLine(); // Clear the invalid input.
                continue; // Restart the loop.
            }
    
            int withdrawAmount = input.nextInt(); // Get the withdrawal amount.
    
            if (withdrawAmount <= 0) {
                System.out.println("\nWithdrawal amount must be positive.");
                sleepConsole(); // Sleep terminal for 3 seconds.
            } else if (accType.equals("Savings") && withdrawAmount > 20000) {
                System.out.println("\nSavings account withdrawal limit is 20000.");
                sleepConsole(); // Sleep terminal for 3 seconds.
            } else if (accType.equals("Current") && withdrawAmount > userBalance - 5000) {
                System.out.println("\nCurrent account cannot fall below 5000.");
                sleepConsole(); // Sleep terminal for 3 seconds.
            } else if (userBalance - withdrawAmount < 0) {
                System.out.println("\nInsufficient balance.");
                sleepConsole(); // Sleep terminal for 3 seconds.
            } else {
                userBalance -= withdrawAmount; // Subtract the amount from the balance.
                System.out.println("Withdrawal successful! New balance: " + userBalance);
                sleepConsole(); // Sleep terminal for 3 seconds.
                postLogin(userName, accType, userBalance); // Return to postLogin menu.
                return; // Exit the method.
            }
        }
    }

    /* CALCULATE INTEREST
    Show interest earned.
    */
    static void calculateInterest(String userName, String accType, int userBalance) {
        double interestRate = 0.03; // 3% annual interest rate for Savings accounts.
        double interest = userBalance * interestRate; // Formula.
        System.out.println("\nInterest earned: " + interest);
        sleepConsole(); // Sleep terminal for 3 seconds.

        postLogin(userName, accType, userBalance); // Proceed back to post login menu.
    }

//---------------------------------------------------------------------------------------------------------------------------------------------------------
    /* MAIN MENU
    Show main menu with options: Register, Login, or Exit.
    Based on the user's choice, it calls the appropriate method.
    */
    static void mainMenu() {
        Scanner input = new Scanner(System.in);

        clearConsole(); // Clear terminal for a cleaner look
    
        System.out.println("************************ MENU **************************");

        System.out.println("\nWelcome to the Multi-Tier Bank Account Management System");
        System.out.println("1. Register\n2. Login\n3. Exit");
        
        while (true) {
            try {
                System.out.print("[+] Enter your choice: ");
                int choice = input.nextInt();

                switch (choice) {
                    case 1:
                        userRegister();
                        break;

                    case 2:
                        userLogin();
                        break;

                    case 3:
                        System.out.println("\nExiting now.");
                        sleepConsole(); // Sleep terminal for 3 seconds.
                        System.exit(0); // Exit the program.

                    default:
                        System.out.println("\nInvalid choice.");
                        sleepConsole(); // Sleep terminal for 3 seconds.
                        mainMenu(); // Display main menu again.
                    }
            } catch (java.util.InputMismatchException e) {
                    System.out.println("\nInvalid input. Please enter a number.");
                    sleepConsole(); // Sleep terminal for 3 seconds.
                    mainMenu(); // Display main menu again.
                    //input.nextLine(); // Clear invalid input from the scanner.
            } 
        }
    }

//---------------------------------------------------------------------------------------------------------------------------------------------------------
    // Calls mainMenu() to start the program.
    public static void main(String[] args) {
        mainMenu(); // Proceed to main menu.
    }
}
